import { describe, it, expect, vi, beforeEach } from 'vitest';
import {
  isAutoGeneratedGroup,
  findGroupByDomain,
  createGroupForDomain,
  addTabToGroup
} from '../../src/utils/group';
import { AUTO_GROUP_PREFIX, DEFAULT_GROUP_COLORS } from '../../src/constants';

describe('グループユーティリティテスト', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('isAutoGeneratedGroup', () => {
    it('自動生成されたグループにtrueを返すこと', async () => {
      const mockGroup = {
        id: 1,
        title: `${AUTO_GROUP_PREFIX} example.com`,
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      vi.mocked(chrome.tabGroups.query).mockResolvedValue([mockGroup] as chrome.tabGroups.TabGroup[]);

      const result = await isAutoGeneratedGroup(1);
      expect(result).toBe(true);
    });

    it('手動作成されたグループにfalseを返すこと', async () => {
      const mockGroup = {
        id: 1,
        title: 'My Custom Group',
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      vi.mocked(chrome.tabGroups.query).mockResolvedValue([mockGroup] as chrome.tabGroups.TabGroup[]);

      const result = await isAutoGeneratedGroup(1);
      expect(result).toBe(false);
    });

    it('タイトルのないグループにfalseを返すこと', async () => {
      const mockGroup = {
        id: 1,
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      vi.mocked(chrome.tabGroups.query).mockResolvedValue([mockGroup] as chrome.tabGroups.TabGroup[]);

      const result = await isAutoGeneratedGroup(1);
      expect(result).toBe(false);
    });

    it('グループが見つからない場合はfalseを返すこと', async () => {
      vi.mocked(chrome.tabGroups.query).mockResolvedValue([]);

      const result = await isAutoGeneratedGroup(1);
      expect(result).toBe(false);
    });

    it('Chrome APIエラー時にfalseを返すこと', async () => {
      vi.mocked(chrome.tabGroups.query).mockRejectedValue(new Error('API Error'));

      const result = await isAutoGeneratedGroup(1);
      expect(result).toBe(false);
    });
  });

  describe('findGroupByDomain', () => {
    it('ドメインの既存自動生成グループを見つけられること', async () => {
      const mockGroups = [
        {
          id: 1,
          title: `${AUTO_GROUP_PREFIX} example.com`,
          color: 'blue' as chrome.tabGroups.ColorEnum,
          collapsed: false,
          windowId: 1
        },
        {
          id: 2,
          title: 'Manual Group',
          color: 'red' as chrome.tabGroups.ColorEnum,
          collapsed: false,
          windowId: 1
        }
      ];

      vi.mocked(chrome.tabGroups.query).mockResolvedValue(mockGroups as chrome.tabGroups.TabGroup[]);

      const result = await findGroupByDomain('example.com');
      expect(result).toEqual({
        id: 1,
        title: `${AUTO_GROUP_PREFIX} example.com`,
        color: 'blue',
        collapsed: false,
        windowId: 1,
        domain: 'example.com'
      });
    });

    it('ドメインの自動生成グループが存在しない場合はnullを返すこと', async () => {
      const mockGroups = [
        {
          id: 1,
          title: `${AUTO_GROUP_PREFIX} other.com`,
          color: 'blue' as chrome.tabGroups.ColorEnum,
          collapsed: false,
          windowId: 1
        }
      ];

      vi.mocked(chrome.tabGroups.query).mockResolvedValue(mockGroups as chrome.tabGroups.TabGroup[]);

      const result = await findGroupByDomain('example.com');
      expect(result).toBeNull();
    });

    it('windowIdが指定された場合にフィルタリングできること', async () => {
      const mockGroupsWindow1 = [
        {
          id: 1,
          title: `${AUTO_GROUP_PREFIX} example.com`,
          color: 'blue' as chrome.tabGroups.ColorEnum,
          collapsed: false,
          windowId: 1
        }
      ];

      vi.mocked(chrome.tabGroups.query).mockResolvedValue(mockGroupsWindow1 as chrome.tabGroups.TabGroup[]);

      const result = await findGroupByDomain('example.com', 1);
      expect(result?.id).toBe(1);
      expect(chrome.tabGroups.query).toHaveBeenCalledWith({ windowId: 1 });
    });

    it('Chrome APIエラー時にnullを返すこと', async () => {
      vi.mocked(chrome.tabGroups.query).mockRejectedValue(new Error('API Error'));

      const result = await findGroupByDomain('example.com');
      expect(result).toBeNull();
    });
  });

  describe('createGroupForDomain', () => {
    it('ドメイン用の新しいグループを作成できること', async () => {
      const mockGroup = {
        id: 1,
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      const mockUpdatedGroup = {
        ...mockGroup,
        title: `${AUTO_GROUP_PREFIX} example.com`
      };

      vi.mocked(chrome.tabGroups.create).mockResolvedValue(mockGroup as chrome.tabGroups.TabGroup);
      vi.mocked(chrome.tabGroups.update).mockResolvedValue(mockUpdatedGroup as chrome.tabGroups.TabGroup);

      const result = await createGroupForDomain('example.com', 1);
      
      expect(result).toEqual({
        id: 1,
        title: `${AUTO_GROUP_PREFIX} example.com`,
        color: 'blue',
        collapsed: false,
        windowId: 1,
        domain: 'example.com'
      });

      expect(chrome.tabGroups.create).toHaveBeenCalledWith({
        windowId: 1
      });
    });

    it('作成後にグループタイトルと色を更新できること', async () => {
      const mockGroup = {
        id: 1,
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      const mockUpdatedGroup = {
        ...mockGroup,
        title: `${AUTO_GROUP_PREFIX} example.com`
      };

      vi.mocked(chrome.tabGroups.create).mockResolvedValue(mockGroup as chrome.tabGroups.TabGroup);
      vi.mocked(chrome.tabGroups.update).mockResolvedValue(mockUpdatedGroup as chrome.tabGroups.TabGroup);

      await createGroupForDomain('example.com', 1);

      expect(chrome.tabGroups.update).toHaveBeenCalledWith(1, {
        title: `${AUTO_GROUP_PREFIX} example.com`,
        color: expect.any(String)
      });
    });

    it('Chrome APIエラー時にnullを返すこと', async () => {
      vi.mocked(chrome.tabGroups.create).mockRejectedValue(new Error('API Error'));

      const result = await createGroupForDomain('example.com', 1);
      expect(result).toBeNull();
    });
  });

  describe('addTabToGroup', () => {
    it('既存グループにタブを追加できること', async () => {
      vi.mocked(chrome.tabs.group).mockResolvedValue();

      const success = await addTabToGroup(123, 1);
      
      expect(success).toBe(true);
      expect(chrome.tabs.group).toHaveBeenCalledWith({
        tabIds: [123],
        groupId: 1
      });
    });

    it('Chrome APIエラー時にfalseを返すこと', async () => {
      vi.mocked(chrome.tabs.group).mockRejectedValue(new Error('API Error'));

      const success = await addTabToGroup(123, 1);
      expect(success).toBe(false);
    });

    it('複数タブを処理できること', async () => {
      vi.mocked(chrome.tabs.group).mockResolvedValue();

      const success = await addTabToGroup([123, 456], 1);
      
      expect(success).toBe(true);
      expect(chrome.tabs.group).toHaveBeenCalledWith({
        tabIds: [123, 456],
        groupId: 1
      });
    });
  });
});