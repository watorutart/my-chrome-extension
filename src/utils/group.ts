import { AUTO_GROUP_PREFIX, DEFAULT_GROUP_COLORS } from '../constants';
import type { GroupInfo } from '../types';

/**
 * 指定されたグループが自動生成されたものかどうかを判定する
 * @param groupId - 判定対象のグループID
 * @returns 自動生成されたグループの場合はtrue
 */
export async function isAutoGeneratedGroup(groupId: number): Promise<boolean> {
  try {
    const group = await chrome.tabGroups.get(groupId);
    
    if (!group || !group.title) {
      return false;
    }
    
    return group.title.startsWith(AUTO_GROUP_PREFIX);
  } catch (error) {
    console.error('Error checking if group is auto-generated:', error);
    return false;
  }
}

/**
 * 指定されたドメインの自動生成グループを検索する
 * @param domain - 検索対象のドメイン名
 * @param windowId - 検索対象のウィンドウID（未指定の場合は全ウィンドウ）
 * @returns 該当するグループ情報（見つからない場合はnull）
 */
export async function findGroupByDomain(domain: string, windowId?: number): Promise<GroupInfo | null> {
  const query = windowId ? { windowId } : {};
  
  try {
    const groups = await chrome.tabGroups.query(query);
    const expectedTitle = `${AUTO_GROUP_PREFIX} ${domain}`;
    
    const group = groups.find(g => g.title === expectedTitle);
    
    return group ? convertTabGroupToGroupInfo(group, domain) : null;
  } catch (error) {
    console.error('Error finding group by domain:', error);
    return null;
  }
}

/**
 * 指定されたドメイン用の新しいタブグループを作成する
 * @param domain - グループを作成するドメイン名
 * @param windowId - グループを作成するウィンドウID
 * @returns 作成されたグループ情報（作成に失敗した場合はnull）
 */
export async function createGroupForDomain(domain: string, windowId: number, targetTabId?: number): Promise<GroupInfo | null> {
  try {
    let tabToGroup: number;
    
    // If a specific tab ID is provided, use it; otherwise get any tab from the window
    if (targetTabId) {
      tabToGroup = targetTabId;
    } else {
      const tabs = await chrome.tabs.query({ windowId });
      if (tabs.length === 0) {
        return null;
      }
      tabToGroup = tabs[0].id!;
    }
    
    // Create the group by grouping the target tab
    const groupId = await chrome.tabs.group({
      tabIds: [tabToGroup]
    });
    
    // Select a color based on domain hash for consistency
    const color = selectColorForDomain(domain);
    
    // Update the group with title and color
    const updatedGroup = await chrome.tabGroups.update(groupId, {
      title: `${AUTO_GROUP_PREFIX} ${domain}`,
      color
    });
    
    return convertTabGroupToGroupInfo(updatedGroup, domain);
  } catch (error) {
    console.error('Error creating group for domain:', error);
    return null;
  }
}

/**
 * ドメイン名に基づいてグループの色を一貫して選択する
 * 同じドメインは常に同じ色になるようハッシュ関数を使用
 * @param domain - 色を選択するドメイン名
 * @returns 選択された色
 */
function selectColorForDomain(domain: string): chrome.tabGroups.ColorEnum {
  // Use a simple hash function to consistently assign colors to domains
  let hash = 0;
  for (let i = 0; i < domain.length; i++) {
    const char = domain.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  
  const colorIndex = Math.abs(hash) % DEFAULT_GROUP_COLORS.length;
  return DEFAULT_GROUP_COLORS[colorIndex];
}

/**
 * Chrome TabGroupオブジェクトをGroupInfo型に変換する
 * @param group - 変換元のChrome TabGroupオブジェクト
 * @param domain - グループに関連付けるドメイン名
 * @returns 変換されたGroupInfo
 */
function convertTabGroupToGroupInfo(group: chrome.tabGroups.TabGroup, domain: string): GroupInfo {
  return {
    id: group.id,
    title: group.title,
    color: group.color,
    collapsed: group.collapsed,
    windowId: group.windowId,
    domain
  };
}

/**
 * 指定されたグループが存在するかどうかを確認する
 * @param groupId - 確認対象のグループID
 * @returns グループが存在する場合はtrue
 */
async function verifyGroupExists(groupId: number): Promise<boolean> {
  try {
    await chrome.tabGroups.get(groupId);
    return true;
  } catch (error) {
    console.warn(`Group with id ${groupId} does not exist:`, error);
    return false;
  }
}

/**
 * 指定されたタブを既存のグループに追加する
 * @param tabIds - 追加するタブのID（単一または配列）
 * @param groupId - 追加先のグループID
 * @returns 追加に成功した場合はtrue
 */
export async function addTabToGroup(tabIds: number | number[], groupId: number): Promise<boolean> {
  try {
    // グループの存在を事前に確認
    const groupExists = await verifyGroupExists(groupId);
    if (!groupExists) {
      console.error(`Cannot add tab to group: Group with id ${groupId} does not exist`);
      return false;
    }

    const tabIdArray = Array.isArray(tabIds) ? tabIds : [tabIds];
    
    await chrome.tabs.group({
      tabIds: tabIdArray,
      groupId
    });
    
    return true;
  } catch (error) {
    console.error('Error adding tab to group:', error);
    return false;
  }
}