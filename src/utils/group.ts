import { AUTO_GROUP_PREFIX, DEFAULT_GROUP_COLORS } from '../constants';
import type { GroupInfo } from '../types';

export async function isAutoGeneratedGroup(groupId: number): Promise<boolean> {
  try {
    const group = await chrome.tabGroups.get(groupId);
    
    if (!group || !group.title) {
      return false;
    }
    
    return group.title.startsWith(AUTO_GROUP_PREFIX);
  } catch (error) {
    console.error('Error checking if group is auto-generated:', error);
    return false;
  }
}

export async function findGroupByDomain(domain: string, windowId?: number): Promise<GroupInfo | null> {
  const query = windowId ? { windowId } : {};
  
  try {
    const groups = await chrome.tabGroups.query(query);
    const expectedTitle = `${AUTO_GROUP_PREFIX} ${domain}`;
    
    const group = groups.find(g => g.title === expectedTitle);
    
    return group ? convertTabGroupToGroupInfo(group, domain) : null;
  } catch (error) {
    console.error('Error finding group by domain:', error);
    return null;
  }
}

export async function createGroupForDomain(domain: string, windowId: number): Promise<GroupInfo | null> {
  try {
    // Get a sample tab from the window to group initially
    const tabs = await chrome.tabs.query({ windowId });
    if (tabs.length === 0) {
      return null;
    }
    
    // Create the group by grouping the first available tab
    const groupId = await chrome.tabs.group({
      tabIds: [tabs[0].id!]
    });
    
    // Select a color based on domain hash for consistency
    const color = selectColorForDomain(domain);
    
    // Update the group with title and color
    const updatedGroup = await chrome.tabGroups.update(groupId, {
      title: `${AUTO_GROUP_PREFIX} ${domain}`,
      color
    });
    
    // Remove the temporary tab from the group
    await chrome.tabs.ungroup([tabs[0].id!]);
    
    return convertTabGroupToGroupInfo(updatedGroup, domain);
  } catch (error) {
    console.error('Error creating group for domain:', error);
    return null;
  }
}

function selectColorForDomain(domain: string): chrome.tabGroups.ColorEnum {
  // Use a simple hash function to consistently assign colors to domains
  let hash = 0;
  for (let i = 0; i < domain.length; i++) {
    const char = domain.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash = hash & hash; // Convert to 32-bit integer
  }
  
  const colorIndex = Math.abs(hash) % DEFAULT_GROUP_COLORS.length;
  return DEFAULT_GROUP_COLORS[colorIndex];
}

function convertTabGroupToGroupInfo(group: chrome.tabGroups.TabGroup, domain: string): GroupInfo {
  return {
    id: group.id,
    title: group.title,
    color: group.color,
    collapsed: group.collapsed,
    windowId: group.windowId,
    domain
  };
}

export async function addTabToGroup(tabIds: number | number[], groupId: number): Promise<boolean> {
  try {
    const tabIdArray = Array.isArray(tabIds) ? tabIds : [tabIds];
    
    await chrome.tabs.group({
      tabIds: tabIdArray,
      groupId
    });
    
    return true;
  } catch (error) {
    console.error('Error adding tab to group:', error);
    return false;
  }
}