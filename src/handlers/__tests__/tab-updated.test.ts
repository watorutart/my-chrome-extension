import { describe, it, expect, vi, beforeEach } from 'vitest';
import { handleTabUpdated } from '../tab-updated';
import { extractDomain } from '../../utils/domain';
import { findGroupByDomain, createGroupForDomain, addTabToGroup, isAutoGeneratedGroup } from '../../utils/group';

// Mock the utility functions
vi.mock('../../utils/domain');
vi.mock('../../utils/group');

const mockExtractDomain = vi.mocked(extractDomain);
const mockFindGroupByDomain = vi.mocked(findGroupByDomain);
const mockCreateGroupForDomain = vi.mocked(createGroupForDomain);
const mockAddTabToGroup = vi.mocked(addTabToGroup);
const mockIsAutoGeneratedGroup = vi.mocked(isAutoGeneratedGroup);

// Mock chrome APIs
const mockTabsGet = vi.fn();
const mockTabGroupsGet = vi.fn();

Object.assign(globalThis, {
  chrome: {
    tabs: {
      get: mockTabsGet
    },
    tabGroups: {
      get: mockTabGroupsGet,
      TAB_GROUP_ID_NONE: -1
    }
  }
});

describe('タブ更新ハンドラーテスト', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('handleTabUpdated', () => {
    it('URLが変更された場合に新しいドメインのグループに移動すること', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'https://new-example.com/page'
      };

      const mockTab = {
        id: 123,
        url: 'https://new-example.com/page',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      const mockCurrentGroup = {
        id: 1,
        title: '[Auto] old-example.com',
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      const mockNewGroup = {
        id: 2,
        title: '[Auto] new-example.com',
        color: 'red' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1,
        domain: 'new-example.com'
      };

      mockTabsGet.mockResolvedValue(mockTab);
      mockTabGroupsGet.mockResolvedValue(mockCurrentGroup);
      mockIsAutoGeneratedGroup.mockResolvedValue(true);
      mockExtractDomain.mockReturnValue('new-example.com');
      mockFindGroupByDomain.mockResolvedValue(mockNewGroup);
      mockAddTabToGroup.mockResolvedValue(true);

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockTabsGet).toHaveBeenCalledWith(123);
      expect(mockTabGroupsGet).toHaveBeenCalledWith(1);
      expect(mockIsAutoGeneratedGroup).toHaveBeenCalledWith(mockCurrentGroup.id);
      expect(mockExtractDomain).toHaveBeenCalledWith('https://new-example.com/page');
      expect(mockFindGroupByDomain).toHaveBeenCalledWith('new-example.com', 1);
      expect(mockAddTabToGroup).toHaveBeenCalledWith(123, 2);
    });

    it('新しいドメインのグループが存在しない場合に新しいグループを作成すること', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'https://new-example.com/page'
      };

      const mockTab = {
        id: 123,
        url: 'https://new-example.com/page',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      const mockCurrentGroup = {
        id: 1,
        title: '[Auto] old-example.com',
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      const mockNewGroup = {
        id: 2,
        title: '[Auto] new-example.com',
        color: 'red' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1,
        domain: 'new-example.com'
      };

      mockTabsGet.mockResolvedValue(mockTab);
      mockTabGroupsGet.mockResolvedValue(mockCurrentGroup);
      mockIsAutoGeneratedGroup.mockResolvedValue(true);
      mockExtractDomain.mockReturnValue('new-example.com');
      mockFindGroupByDomain.mockResolvedValue(null);
      mockCreateGroupForDomain.mockResolvedValue(mockNewGroup);
      mockAddTabToGroup.mockResolvedValue(true);

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockCreateGroupForDomain).toHaveBeenCalledWith('new-example.com', 1);
      expect(mockAddTabToGroup).toHaveBeenCalledWith(123, 2);
    });

    it('手動で作成されたグループにいる場合は移動しないこと', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'https://new-example.com/page'
      };

      const mockTab = {
        id: 123,
        url: 'https://new-example.com/page',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      const mockCurrentGroup = {
        id: 1,
        title: 'My Manual Group',
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      mockTabsGet.mockResolvedValue(mockTab);
      mockTabGroupsGet.mockResolvedValue(mockCurrentGroup);
      mockIsAutoGeneratedGroup.mockResolvedValue(false);

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockExtractDomain).not.toHaveBeenCalled();
      expect(mockFindGroupByDomain).not.toHaveBeenCalled();
      expect(mockCreateGroupForDomain).not.toHaveBeenCalled();
      expect(mockAddTabToGroup).not.toHaveBeenCalled();
    });

    it('URLが変更されていない場合は何もしないこと', async () => {
      const tabId = 123;
      const changeInfo = {
        status: 'complete'
      };

      const mockTab = {
        id: 123,
        url: 'https://example.com/page',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockTabsGet).not.toHaveBeenCalled();
      expect(mockExtractDomain).not.toHaveBeenCalled();
    });

    it('タブがグループに所属していない場合に新しいドメインのグループに追加すること', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'https://example.com/page'
      };

      const mockTab = {
        id: 123,
        url: 'https://example.com/page',
        windowId: 1,
        groupId: chrome.tabGroups.TAB_GROUP_ID_NONE
      } as chrome.tabs.Tab;

      const mockGroup = {
        id: 1,
        title: '[Auto] example.com',
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1,
        domain: 'example.com'
      };

      mockTabsGet.mockResolvedValue(mockTab);
      mockExtractDomain.mockReturnValue('example.com');
      mockFindGroupByDomain.mockResolvedValue(mockGroup);
      mockAddTabToGroup.mockResolvedValue(true);

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockTabsGet).toHaveBeenCalledWith(123);
      expect(mockExtractDomain).toHaveBeenCalledWith('https://example.com/page');
      expect(mockFindGroupByDomain).toHaveBeenCalledWith('example.com', 1);
      expect(mockAddTabToGroup).toHaveBeenCalledWith(123, 1);
    });

    it('無効なドメインの場合は何もしないこと', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'chrome://settings'
      };

      const mockTab = {
        id: 123,
        url: 'chrome://settings',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      const mockCurrentGroup = {
        id: 1,
        title: '[Auto] example.com',
        color: 'blue' as chrome.tabGroups.ColorEnum,
        collapsed: false,
        windowId: 1
      };

      mockTabsGet.mockResolvedValue(mockTab);
      mockTabGroupsGet.mockResolvedValue(mockCurrentGroup);
      mockIsAutoGeneratedGroup.mockResolvedValue(true);
      mockExtractDomain.mockReturnValue(null);

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockFindGroupByDomain).not.toHaveBeenCalled();
      expect(mockCreateGroupForDomain).not.toHaveBeenCalled();
      expect(mockAddTabToGroup).not.toHaveBeenCalled();
    });

    it('Chrome API呼び出しエラーをハンドルすること', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'https://example.com/page'
      };

      const mockTab = {
        id: 123,
        url: 'https://example.com/page',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      mockTabsGet.mockRejectedValue(new Error('Tab not found'));

      await handleTabUpdated(tabId, changeInfo, mockTab);

      // Should not throw error, just handle gracefully
      expect(mockExtractDomain).not.toHaveBeenCalled();
    });

    it('グループ情報取得エラーをハンドルすること', async () => {
      const tabId = 123;
      const changeInfo = {
        url: 'https://example.com/page'
      };

      const mockTab = {
        id: 123,
        url: 'https://example.com/page',
        windowId: 1,
        groupId: 1
      } as chrome.tabs.Tab;

      mockTabsGet.mockResolvedValue(mockTab);
      mockTabGroupsGet.mockRejectedValue(new Error('Group not found'));

      await handleTabUpdated(tabId, changeInfo, mockTab);

      expect(mockExtractDomain).not.toHaveBeenCalled();
    });
  });
});