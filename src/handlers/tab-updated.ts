import { extractDomain } from '../utils/domain';
import { findGroupByDomain, createGroupForDomain, addTabToGroup, isAutoGeneratedGroup } from '../utils/group';

/**
 * タブ更新時のイベントハンドラー
 * 
 * URLが変更された場合に、以下の処理を行います：
 * 1. 現在のグループが自動生成されたものかをチェック
 * 2. 手動で作成されたグループの場合は移動しない
 * 3. 新しいドメインに対応するグループを検索または作成
 * 4. タブを適切なグループに移動
 * 
 * @param tabId - 更新されたタブのID
 * @param changeInfo - タブの変更情報
 * @param _tab - 更新されたタブの情報（未使用）
 */
export async function handleTabUpdated(
  tabId: number,
  changeInfo: chrome.tabs.TabChangeInfo,
  _tab: chrome.tabs.Tab
): Promise<void> {
  try {
    // URLが変更されていない場合は何もしない
    if (!changeInfo.url) {
      return;
    }

    // タブの最新情報を取得
    const currentTab = await chrome.tabs.get(tabId);
    if (!currentTab || !currentTab.url || currentTab.id === undefined) {
      return;
    }

    // タブが現在グループに所属している場合の処理
    if (currentTab.groupId !== undefined && currentTab.groupId !== chrome.tabGroups.TAB_GROUP_ID_NONE) {
      try {
        // 現在のグループ情報を取得
        const currentGroup = await chrome.tabGroups.get(currentTab.groupId);
        
        // 手動で作成されたグループの場合は移動しない
        const isAutoGroup = await isAutoGeneratedGroup(currentGroup.id);
        if (!isAutoGroup) {
          return;
        }
      } catch (error) {
        // グループ情報の取得に失敗した場合はログに記録してスキップ
        console.warn('Failed to get current group info:', error);
        return;
      }
    }

    // 新しいドメインを抽出
    const newDomain = extractDomain(currentTab.url);
    if (!newDomain) {
      return;
    }

    // 新しいドメインに対応するグループを検索
    let targetGroup = await findGroupByDomain(newDomain, currentTab.windowId);

    // グループが存在しない場合は新しいグループを作成
    if (!targetGroup) {
      targetGroup = await createGroupForDomain(newDomain, currentTab.windowId, currentTab.id);
      if (!targetGroup) {
        console.warn(`Failed to create group for domain: ${newDomain}`);
        return;
      }
    }

    // タブをターゲットグループに追加
    const success = await addTabToGroup(currentTab.id, targetGroup.id);
    if (!success) {
      console.warn(`Failed to add tab ${currentTab.id} to group ${targetGroup.id}`);
    }

  } catch (error) {
    console.error('Error in handleTabUpdated:', error);
  }
}